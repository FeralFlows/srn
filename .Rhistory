units="Final Energy (TWh)",
x=year,
xLabel="Year",
aggregate="sum",
fill1=sector,
fillLabel1="Sector",
fillPalette1="pal_finalNrg_sec",
fill2="fill2",
fillLabel2="fillLabel2",
fillPalette2="fillPalette2")%>%
dplyr::select(origScen,origQuery,origValue,origUnits,origX,
region,param,scenario,value,units,x,xLabel,aggregate,
fill1,fillLabel1,fillPalette1,fill2,fillLabel2,fillPalette2)
df<-bind_rows(df,tbl)} else {print(paste("Paramater '",paramx,"' not found in database",sep=""))}
return (list(df=df,scenarios=scenarios,queries=queries))
}
tbl<-tbl%>%
left_join(data_frame(scenOrigNames,scenNewNames),by=c("scenario"="scenOrigNames")),
mutate(param="finalNrgbySec",
origScen=scenario,
origQuery=paramx,
origValue=value,
origUnits=Units,
origX=year,
scenario=scenNewNames,
value=value*convEJ2TWh,
units="Final Energy (TWh)",
x=year,
xLabel="Year",
aggregate="sum",
fill1=sector,
fillLabel1="Sector",
fillPalette1="pal_finalNrg_sec",
fill2="fill2",
fillLabel2="fillLabel2",
fillPalette2="fillPalette2")%>%
dplyr::select(origScen,origQuery,origValue,origUnits,origX,
region,param,scenario,value,units,x,xLabel,aggregate,
fill1,fillLabel1,fillPalette1,fill2,fillLabel2,fillPalette2)
df<-bind_rows(df,tbl)} else {print(paste("Paramater '",paramx,"' not found in database",sep=""))}
tbl<-tbl%>%
left_join(data_frame(scenOrigNames,scenNewNames),by=c("scenario"="scenOrigNames"))%>%
mutate(param="finalNrgbySec",
origScen=scenario,
origQuery=paramx,
origValue=value,
origUnits=Units,
origX=year,
scenario=scenNewNames,
value=value*convEJ2TWh,
units="Final Energy (TWh)",
x=year,
xLabel="Year",
aggregate="sum",
fill1=sector,
fillLabel1="Sector",
fillPalette1="pal_finalNrg_sec",
fill2="fill2",
fillLabel2="fillLabel2",
fillPalette2="fillPalette2")%>%
dplyr::select(origScen,origQuery,origValue,origUnits,origX,
region,param,scenario,value,units,x,xLabel,aggregate,
fill1,fillLabel1,fillPalette1,fill2,fillLabel2,fillPalette2)
tbl<-tbl%>%
left_join(data_frame(scenOrigNames,scenNewNames),by=c("scenario"="scenOrigNames"))
tbl
# Read in paramaters from query file and format for later use
df<-tibble()
tbl <- getQuery(dataProjLoaded, paramx) # Tibble
if(!is.null(regions)){df<-df%>%filter(region %in% regions)}
tbl<-tbl%>%
left_join(data_frame(scenOrigNames,scenNewNames),by=c("scenario"="scenOrigNames"))%>%
mutate(param="finalNrgbySec",
origScen=scenario,
origQuery=paramx,
origValue=value,
origUnits=Units,
origX=year,
scenario=scenNewNames,
value=value*convEJ2TWh,
units="Final Energy (TWh)",
x=year,
xLabel="Year",
aggregate="sum",
fill1=sector,
fillLabel1="Sector",
fillPalette1="pal_finalNrg_sec",
fill2="fill2",
fillLabel2="fillLabel2",
fillPalette2="fillPalette2")%>%
dplyr::select(origScen,origQuery,origValue,origUnits,origX,
region,param,scenario,value,units,x,xLabel,aggregate,
fill1,fillLabel1,fillPalette1,fill2,fillLabel2,fillPalette2)
srn.readgcam <- function(gcamdatabasePath,gcamdatabaseName,queryxml,scenOrigNames,
scenNewNames=NULL,
reReadData=T,
dataProj="dataProj.proj",
dirOutputs=paste(getwd(),"/outputs",sep=""),
regions=NULL) {
# Create necessary directories if they dont exist.
if(!dir.exists(dirOutputs)){dir.create(dirOutputs)}  # Output Directory
if(!dir.exists(paste(dirOutputs,"/gcam",sep=""))){dir.create(paste(dirOutputs,"/gcam",sep=""))} # GCAM output directory
# Check for new scenario names
if(is.null(scenNewNames)){scenNewNames<-scenOrigNames}
# Read gcam database or existing dataProj.proj
if(!reReadData){
if(file.exists(paste(gcamdatabasePath,"/",dataProj,sep=""))){
dataProjLoaded<-loadProject(paste(gcamdatabasePath,"/",dataProj,sep=""))}else{
stop(paste("No ",dataProj," file exists. Please set reReadData=T to create dataProj.proj"))
}}else{
if(file.exists(dataProj)){file.remove(dataProj)} # Delete old project file
for (scenario_i in scenOrigNames){
dataProj.proj<-addScenario(conn=connx, proj=dataProj,scenario=scenario_i,queryFile=paste(gcamdatabasePath,"/",queryxml,sep=""))  # Check your queries file
}
file.copy(from=paste(getwd(),"/",dataProj,sep=""), to=gcamdatabasePath,
overwrite = T,copy.mode = TRUE)
file.remove(dataproj)
}
# Save list of scenarios and queries
scenarios<-listScenarios(dataProjLoaded) # List of Scenarios in GCAM database
queries<-listQueries(dataProjLoaded) # List of Queries in queryxml
# Read in paramaters from query file and format for later use
df<-tibble()
# Conversions
convEJ2TWh<-277.77777777778
# Total final energy by aggregate end-use sector
paramx<-"Total final energy by aggregate end-use sector"
if(paramx %in% queries){
tbl <- getQuery(dataProjLoaded, paramx) # Tibble
if(!is.null(regions)){df<-df%>%filter(region %in% regions)}
tbl<-tbl%>%
left_join(data_frame(scenOrigNames,scenNewNames),by=c("scenario"="scenOrigNames"))%>%
mutate(param="finalNrgbySec",
origScen=scenario,
origQuery=paramx,
origValue=value,
origUnits=Units,
origX=year,
scenario=scenNewNames,
value=value*convEJ2TWh,
units="Final Energy (TWh)",
x=year,
xLabel="Year",
aggregate="sum",
fill1=sector,
fillLabel1="Sector",
fillPalette1="pal_finalNrg_sec",
fill2="fill2",
fillLabel2="fillLabel2",
fillPalette2="fillPalette2")%>%
dplyr::select(origScen,origQuery,origValue,origUnits,origX,
region,param,scenario,value,units,x,xLabel,aggregate,
fill1,fillLabel1,fillPalette1,fill2,fillLabel2,fillPalette2)
df<-bind_rows(df,tbl)} else {print(paste("Paramater '",paramx,"' not found in database",sep=""))}
return (list(df=df,scenarios=scenarios,queries=queries))
}
gcamData<-srn.readgcam(reReadData=F, # Default Value is T
dataProj="dataProj.proj", # Default Value is "dataProj.proj"
scenOrigNames=c("ExampleScen1","ExampleScen2"),
scenNewNames=c("Eg1","Eg2"),
gcamdatabasePath=gcamdatabasePath,
gcamdatabaseName=gcamdatabaseName,
queryxml=queryxml,
dirOutputs= paste(getwd(),"/outputs",sep=""), # Default Value is paste(getwd(),"/outputs",sep="")
regions=NULL # Default Value is NULL
)
gcamData$df
devtools::check()
# Initialize variables by setting to NULL
NULL<-Units<-aggregate<-connx<-dataproj<-fill1<-fill2<-fillLabel1<-fillLabel2
# Initialize variables by setting to NULL
NULL<-Units<-aggregate<-connx<-dataproj<-fill1<-fill2<-fillLabel1<-fillLabel2<-
fillPalette1<-fillPalette2<-origQuery<-origScen<-origUnits<-origValue<-
origX<-param<-region<-scenario<-sector<-value<-x<-xLabel<-year
# Initialize variables by setting to NULL
NULL->Units->aggregate->connx->dataproj->fill1->fill2->fillLabel1->fillLabel2->
fillPalette1->fillPalette2->origQuery->origScen->origUnits->origValue->
origX->param->region->scenario->sector->value->x->xLabel->year
devtools::check()
library(srn)
#install_github(repo="JGCRI/rgcam")
library(rgcam)
#----------------------------
# Load Libraries
#----------------------------
a<-srn.colors()
testcolor<-a$elec_tech_colors
pie(rep(1,length(testcolor)),label=names(testcolor),col=a$testcolor)
#----------------------------
# Read GCAM Data
#---------------------------
gcamdatabasePath <-paste(getwd(),"/inputs/gcam",sep="")
gcamdatabaseName <-"example_database_basexdb"
queryxml <- "srnQueries.xml"
# Use function localDBConn from package rgcam to get a list of scenarios if needed.
#localDBConn(gcamdatabasePath,gcamdatabaseName)
gcamData<-srn.readgcam(reReadData=F, # Default Value is T
dataProj="dataProj.proj", # Default Value is "dataProj.proj"
scenOrigNames=c("ExampleScen1","ExampleScen2"),
scenNewNames=c("Eg1","Eg2"),
gcamdatabasePath=gcamdatabasePath,
gcamdatabaseName=gcamdatabaseName,
queryxml=queryxml,
dirOutputs= paste(getwd(),"/outputs",sep=""), # Default Value is paste(getwd(),"/outputs",sep="")
regions=NULL # Default Value is NULL
)
gcamData
library(srn)
#install_github(repo="JGCRI/rgcam")
library(rgcam)
#----------------------------
# Load Libraries
#----------------------------
a<-srn.colors()
testcolor<-a$elec_tech_colors
pie(rep(1,length(testcolor)),label=names(testcolor),col=a$testcolor)
#----------------------------
# Read GCAM Data
#---------------------------
gcamdatabasePath <-paste(getwd(),"/inputs/gcam",sep="")
gcamdatabaseName <-"example_database_basexdb"
queryxml <- "srnQueries.xml"
# Use function localDBConn from package rgcam to get a list of scenarios if needed.
#localDBConn(gcamdatabasePath,gcamdatabaseName)
gcamData<-srn.readgcam(reReadData=F, # Default Value is T
dataProj="dataProj.proj", # Default Value is "dataProj.proj"
scenOrigNames=c("ExampleScen1","ExampleScen2"),
scenNewNames=c("Eg1","Eg2"),
gcamdatabasePath=gcamdatabasePath,
gcamdatabaseName=gcamdatabaseName,
queryxml=queryxml,
dirOutputs= paste(getwd(),"/outputs",sep=""), # Default Value is paste(getwd(),"/outputs",sep="")
regions=NULL # Default Value is NULL
)
library(srn)
srn.readgcam()
srn.readgcam
library(srn)
library(srn)
srn.readgcam
#----------------------------
# Install The SRN Package
#----------------------------
#install.packages("devtools");
#library(devtools)
#install_github(repo="zarrarkhan/srn",'dev_srn') # To install directly from branch
library(srn)
#install_github(repo="JGCRI/rgcam")
library(rgcam)
#----------------------------
# Load Libraries
#----------------------------
a<-srn.colors()
testcolor<-a$elec_tech_colors
pie(rep(1,length(testcolor)),label=names(testcolor),col=a$testcolor)
#----------------------------
# Read GCAM Data
#---------------------------
gcamdatabasePath <-paste(getwd(),"/inputs/gcam",sep="")
gcamdatabaseName <-"example_database_basexdb"
queryxml <- "srnQueries.xml"
# Use function localDBConn from package rgcam to get a list of scenarios if needed.
#localDBConn(gcamdatabasePath,gcamdatabaseName)
gcamData<-srn.readgcam(reReadData=F, # Default Value is T
dataProj="dataProj.proj", # Default Value is "dataProj.proj"
scenOrigNames=c("ExampleScen1","ExampleScen2"),
scenNewNames=c("Eg1","Eg2"),
gcamdatabasePath=gcamdatabasePath,
gcamdatabaseName=gcamdatabaseName,
queryxml=queryxml,
dirOutputs= paste(getwd(),"/outputs",sep=""), # Default Value is paste(getwd(),"/outputs",sep="")
regions=NULL # Default Value is NULL
)
gcamData$data
gcamData$data$fillPalette1
# GDP MER by region
paramx<-"GDP MER by region"
paramx %in% queries
queries=gcamData$queries
quereies
queries
paramx %in% queries
tbl <- getQuery(dataProjLoaded, paramx) # Tibble
dataProjLoaded<-loadProject(paste(gcamdatabasePath,"/",dataProj,sep=""))
dataProj="dataProj.proj"
dataProjLoaded<-loadProject(paste(gcamdatabasePath,"/",dataProj,sep=""))
tbl <- getQuery(dataProjLoaded, paramx) # Tibble
if(!is.null(regions)){df<-df%>%filter(region %in% regions)}
regions=NULL
if(!is.null(regions)){df<-df%>%filter(region %in% regions)}
names(tbl)
tbl
a<-srn.colors()
tbl<-tbl%>%
left_join(data_frame(scenOrigNames,scenNewNames),by=c("scenario"="scenOrigNames"))%>%
mutate(param="gdp",
origScen=scenario, origQuery=paramx, origValue=value, origUnits=Units, origX=year,
scenario=scenNewNames,value=value*convEJ2TWh,
units="GDP (Billion 1990 USD)",
vintage=paste("Vint_",year,sep=""),
x=year,
xLabel="Year",
aggregate="sum",
fill1="fill1",
fillLabel1="GDP",
fillPalette1="pal_16",
fill2="fill2",
fillLabel2="fillLabel2",
fillPalette2="fillPalette2")%>%
dplyr::select(origScen,origQuery,origValue,origUnits,origX,
region,param,scenario,value,units,vintage,x,xLabel,aggregate,
fill1,fillLabel1,fillPalette1,fill2,fillLabel2,fillPalette2)
library(dplyr)
tbl<-tbl%>%
left_join(data_frame(scenOrigNames,scenNewNames),by=c("scenario"="scenOrigNames"))%>%
mutate(param="gdp",
origScen=scenario, origQuery=paramx, origValue=value, origUnits=Units, origX=year,
scenario=scenNewNames,value=value*convEJ2TWh,
units="GDP (Billion 1990 USD)",
vintage=paste("Vint_",year,sep=""),
x=year,
xLabel="Year",
aggregate="sum",
fill1="fill1",
fillLabel1="GDP",
fillPalette1="pal_16",
fill2="fill2",
fillLabel2="fillLabel2",
fillPalette2="fillPalette2")%>%
dplyr::select(origScen,origQuery,origValue,origUnits,origX,
region,param,scenario,value,units,vintage,x,xLabel,aggregate,
fill1,fillLabel1,fillPalette1,fill2,fillLabel2,fillPalette2)
scenOrigNames=c("ExampleScen1","ExampleScen2")
scenNewNames=c("Eg1","Eg2")
tbl<-tbl%>%
left_join(data_frame(scenOrigNames,scenNewNames),by=c("scenario"="scenOrigNames"))%>%
mutate(param="gdp",
origScen=scenario, origQuery=paramx, origValue=value, origUnits=Units, origX=year,
scenario=scenNewNames,value=value*convEJ2TWh,
units="GDP (Billion 1990 USD)",
vintage=paste("Vint_",year,sep=""),
x=year,
xLabel="Year",
aggregate="sum",
fill1="fill1",
fillLabel1="GDP",
fillPalette1="pal_16",
fill2="fill2",
fillLabel2="fillLabel2",
fillPalette2="fillPalette2")%>%
dplyr::select(origScen,origQuery,origValue,origUnits,origX,
region,param,scenario,value,units,vintage,x,xLabel,aggregate,
fill1,fillLabel1,fillPalette1,fill2,fillLabel2,fillPalette2)
# Conversions
convEJ2TWh<-277.77777777778
tbl
tbl<-tbl%>%
left_join(data_frame(scenOrigNames,scenNewNames),by=c("scenario"="scenOrigNames"))%>%
mutate(param="gdp",
origScen=scenario, origQuery=paramx, origValue=value, origUnits=Units, origX=year,
scenario=scenNewNames,
value=value/1000,
units="GDP (Billion 1990 USD)",
vintage=paste("Vint_",year,sep=""),
x=year,
xLabel="Year",
aggregate="sum",
fill1="fill1",
fillLabel1="GDP",
fillPalette1="pal_16",
fill2="fill2",
fillLabel2="fillLabel2",
fillPalette2="fillPalette2")%>%
dplyr::select(origScen,origQuery,origValue,origUnits,origX,
region,param,scenario,value,units,vintage,x,xLabel,aggregate,
fill1,fillLabel1,fillPalette1,fill2,fillLabel2,fillPalette2)
data
# Total final energy by aggregate end-use sector
paramx<-"Total final energy by aggregate end-use sector"
if(paramx %in% queries){
tbl <- getQuery(dataProjLoaded, paramx) # Tibble
if(!is.null(regions)){df<-df%>%filter(region %in% regions)}
tbl<-tbl%>%
left_join(data_frame(scenOrigNames,scenNewNames),by=c("scenario"="scenOrigNames"))%>%
mutate(param="finalNrgbySec",
origScen=scenario, origQuery=paramx, origValue=value, origUnits=Units, origX=year,
scenario=scenNewNames,
value=value*convEJ2TWh,
units="Final Energy (TWh)",
vintage=paste("Vint_",year,sep=""),
x=year,
xLabel="Year",
aggregate="sum",
fill1=sector,
fillLabel1="Sector",
fillPalette1="pal_finalNrg_sec",
fill2="fill2",
fillLabel2="fillLabel2",
fillPalette2="fillPalette2")%>%
dplyr::select(origScen,origQuery,origValue,origUnits,origX,
region,param,scenario,value,units,vintage,x,xLabel,aggregate,
fill1,fillLabel1,fillPalette1,fill2,fillLabel2,fillPalette2)
data<-bind_rows(data,tbl)} else {print(paste("Paramater '",paramx,"' not found in database",sep=""))}
# GDP MER by region
paramx<-"GDP MER by region"
# Read in paramaters from query file and format for later use
data<-tibble()
# Read in paramaters from query file and format for later use
data<-tibble()
# Total final energy by aggregate end-use sector
paramx<-"Total final energy by aggregate end-use sector"
if(paramx %in% queries){
tbl <- getQuery(dataProjLoaded, paramx) # Tibble
if(!is.null(regions)){df<-df%>%filter(region %in% regions)}
tbl<-tbl%>%
left_join(data_frame(scenOrigNames,scenNewNames),by=c("scenario"="scenOrigNames"))%>%
mutate(param="finalNrgbySec",
origScen=scenario, origQuery=paramx, origValue=value, origUnits=Units, origX=year,
scenario=scenNewNames,
value=value*convEJ2TWh,
units="Final Energy (TWh)",
vintage=paste("Vint_",year,sep=""),
x=year,
xLabel="Year",
aggregate="sum",
fill1=sector,
fillLabel1="Sector",
fillPalette1="pal_finalNrg_sec",
fill2="fill2",
fillLabel2="fillLabel2",
fillPalette2="fillPalette2")%>%
dplyr::select(origScen,origQuery,origValue,origUnits,origX,
region,param,scenario,value,units,vintage,x,xLabel,aggregate,
fill1,fillLabel1,fillPalette1,fill2,fillLabel2,fillPalette2)
data<-bind_rows(data,tbl)} else {print(paste("Paramater '",paramx,"' not found in database",sep=""))}
# GDP MER by region
paramx<-"GDP MER by region"
if(paramx %in% queries){
tbl <- getQuery(dataProjLoaded, paramx) # Tibble
if(!is.null(regions)){df<-df%>%filter(region %in% regions)}
tbl<-tbl%>%
left_join(data_frame(scenOrigNames,scenNewNames),by=c("scenario"="scenOrigNames"))%>%
mutate(param="gdp",
origScen=scenario, origQuery=paramx, origValue=value, origUnits=Units, origX=year,
scenario=scenNewNames,
value=value/1000,
units="GDP (Billion 1990 USD)",
vintage=paste("Vint_",year,sep=""),
x=year,
xLabel="Year",
aggregate="sum",
fill1="fill1",
fillLabel1="GDP",
fillPalette1="pal_16",
fill2="fill2",
fillLabel2="fillLabel2",
fillPalette2="fillPalette2")%>%
dplyr::select(origScen,origQuery,origValue,origUnits,origX,
region,param,scenario,value,units,vintage,x,xLabel,aggregate,
fill1,fillLabel1,fillPalette1,fill2,fillLabel2,fillPalette2)
data<-bind_rows(data,tbl)} else {print(paste("Paramater '",paramx,"' not found in database",sep=""))}
data
unique(data$param)
unique(data$vintage)
library(srn)
library(srn)
devtools::check()
library(srn)
library(srn)
#----------------------------
# Install The SRN Package
#----------------------------
#install.packages("devtools");
#library(devtools)
#install_github(repo="zarrarkhan/srn",'dev_srn') # To install directly from branch
library(srn)
#install_github(repo="JGCRI/rgcam")
library(rgcam)
#----------------------------
# Load Libraries
#----------------------------
a<-srn.colors()
testcolor<-a$elec_tech_colors
pie(rep(1,length(testcolor)),label=names(testcolor),col=a$testcolor)
#----------------------------
# Read GCAM Data
#---------------------------
gcamdatabasePath <-paste(getwd(),"/inputs/gcam",sep="")
gcamdatabaseName <-"example_database_basexdb"
queryxml <- "srnQueries.xml"
# Use function localDBConn from package rgcam to get a list of scenarios if needed.
#localDBConn(gcamdatabasePath,gcamdatabaseName)
gcamData<-srn.readgcam(reReadData=F, # Default Value is T
dataProj="dataProj.proj", # Default Value is "dataProj.proj"
scenOrigNames=c("ExampleScen1","ExampleScen2"),
scenNewNames=c("Eg1","Eg2"),
gcamdatabasePath=gcamdatabasePath,
gcamdatabaseName=gcamdatabaseName,
queryxml=queryxml,
dirOutputs= paste(getwd(),"/outputs",sep=""), # Default Value is paste(getwd(),"/outputs",sep="")
regions=NULL # Default Value is NULL
)
gcamData$data
library(srn)
library(srn)
devtools::check()
library(srn)
library(srn)
library(srn)
library(srn)
library(srn)
devtools::check()
