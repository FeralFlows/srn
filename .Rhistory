}else{
p = p + guides(fill = guide_legend(title=unique(l1[[classLabel]])))
}
}
}
if(chartType=="line"){
p <- p +  geom_line(aes(color=get(class),group=get(class)),size=sizeLines, stat="identity",position="identity") +
scale_color_manual(values=paletteX)
if(!grepl("class",class)){
p = p + guides(color = guide_legend(title=toTitleCase(paste(class,sep=""))))}else{
if(length(unique(l1[[class]]))<2){
p = p + theme(legend.position="none")
}else{
p = p + guides(color = guide_legend(title=unique(l1[[classLabel]])))
}
}
}
p <- p +
xlab(unique(l1[[xLabel]])) + ylab(eval(parse(text=paste(unique(l1[[units]]),collapse="~")))) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +
scale_x_continuous (breaks=(seq(min(range(l1[[x]])),max(range(l1[[x]])),by=xBreaksMaj)),
minor_breaks=(seq(min(range(l1[[x]])),max(range(l1[[x]])),by=xBreaksMin)),
expand=c(0,xBreaksMaj/2)) +
scale_y_continuous(breaks = pretty_breaks(n = yBreaksMajn), minor_breaks = waiver())
# Faceting
if(length(unique(l1[[facet_columns]])) > 1 & length(unique(l1[[facet_rows]])) > 1){
p <- p + facet_grid(get(facet_rows)~get(facet_columns),scales=scales)
}else{
if(length(unique(l1[[facet_columns]])) > 1 & length(unique(l1[[facet_rows]])) < 2){
p <- p + facet_wrap(facet_columns,ncol=ncolrow,scales = scales)
}
if(length(unique(l1[[facet_columns]])) < 2 & length(unique(l1[[facet_rows]])) > 1){
p <- p + facet_wrap(facet_rows,nrow=ncolrow,scales = scales)
}
}
return(p)
}
srn.chart(tbl_rpAgg, chartType = "bar", facet_columns="none",
class ="scenario", position ="dodge", classPalette = "pal_Basic")
srn.chart(tbl_rpAgg, chartType = "line", facet_columns="none",
class ="scenario", classPalette = "pal_Basic")
srn.chartsProcess <- function(dataTables,scenRef=NULL,
dirOutputs=paste(getwd(),"/outputs",sep=""),pdfpng="png") {
#------------------
# Read in tables
#------------------
tbl<-tibble()
for(table_i in dataTables){
if(file.exists(table_i)){
# Check if any new data tables using the template have been added. The template has
# fewer number of columns since some columns are only used to track processed gcam data.
# These missing columns are added in order to have consistent rows with gcamdata tables.
tblNew<-read.csv(paste(table_i), stringsAsFactors = F)%>%as.tibble
if(length(names(tblNew))<21){
tblNew<-tblNew%>%
mutate(origScen=scenario,
origQuery="Query",
origValue=value,
origUnits=units,
origX=x)}
tbl<-bind_rows(tbl,tblNew)
} else {stop(paste(table_i," does not exist"))}
}
#------------------
# Create Folders if needed
#------------------
if (!dir.exists(dirOutputs)){
dir.create(dirOutputs)}
for (region_i in unique(tbl$region)){
if (!dir.exists(paste(dirOutputs, "/", region_i, sep = ""))){
dir.create(paste(dirOutputs, "/", region_i, sep = ""))}
if (!dir.exists(paste(dirOutputs, "/", region_i, "/regional", sep = ""))){
dir.create(paste(dirOutputs, "/", region_i, "/regional", sep = ""))}
if(length(unique(tbl$scenario))>1){
if (!dir.exists(paste(dirOutputs, "/", region_i, "/regional/compareScen",sep = ""))){
dir.create(paste(dirOutputs, "/", region_i, "/regional/compareScen",sep = ""))}}
for (scenario_i in unique(tbl$scenario)) {
if (!dir.exists(paste(dirOutputs, "/", region_i, "/regional","/", scenario_i,sep = "")))
{dir.create(paste(dirOutputs, "/", region_i, "/regional","/", scenario_i,sep = ""))}
}
}
#------------------
# Create Charts for Each Region & Each Scenario
#------------------
for(region_i in unique(tbl$region)){
for(scenario_i in unique(tbl$scenario)){
for(param_i in unique(tbl$param)){
tbl_rsp<-tbl%>%dplyr::filter(region==region_i,
scenario==scenario_i,
param==param_i)
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rsp, chartType = "bar"),
dir = paste(dirOutputs, "/", region_i, "/regional","/", scenario_i,sep = ""),
filename = paste("figBar_",region_i,"_",scenario_i,"_",param_i,sep="")
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rsp,chartType = "line"),
dir = paste(dirOutputs, "/", region_i, "/regional","/", scenario_i,sep = ""),
filename = paste("figLine_",region_i,"_",scenario_i,"_",param_i,sep="")
)
} # close loop for param
} # close loop for scenario
} # close loop for region
#------------------
# Compare Scenarios for each region
#------------------
if(length(unique(tbl$scenario))>1){
for(region_i in unique(tbl$region)){
for(param_i in unique(tbl$param)){
tbl_rp<-tbl%>%dplyr::filter(region==region_i,
param==param_i)
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rp, chartType = "bar"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste("figBar_",region_i,"_compareScen_",param_i,sep=""),
figWidth = 13*length(unique(tbl_rp$scenario))/2
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rp,chartType = "line"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste("figLine_",region_i,"_compareScen_",param_i,sep=""),
figWidth = 13*length(unique(tbl_rp$scenario))/2
)
# Aggregate across classes
tbl_rpAggsums<-tbl_rp%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-contains(class))%>%
group_by_at(vars(-value,-origValue))%>%
summarize_at(c("value"),funs(sum))
tbl_rpAggmeans<-tbl_rp%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-contains(class))%>%
group_by_at(vars(-value,-origValue))%>%
summarize_at(c("value"),funs(mean))
tbl_rpAgg<-bind_rows(tbl_rpAggsums,tbl_rpAggmeans)%>%ungroup()
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rpAgg, chartType = "bar", facet_columns="none",
class ="scenario", position ="dodge", classPalette = "pal_Basic"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste("figBarDodged_",region_i,"_compareScen_",param_i,sep=""),
figWidth = 13*length(unique(tbl_rp$scenario))/2
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rpAgg, chartType = "line", facet_columns="none",
class ="scenario", classPalette = "pal_Basic"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste("figLineOverlap_",region_i,"_compareScen_",param_i,sep=""),
figWidth = 13*length(unique(tbl_rp$scenario))/2
)
#-------------------------
# Creating Diff Plots
#------------------------
if(is.null(scenRef)){scenRef = unique(tbl_rp$scenario)[1]} # Check if Ref Scenario Chosen
# Calculate Diff Values
tbl_rpd<-tbl_rp%>%
filter(scenario==scenRef)%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
for (scenario_i in unique(tbl_rp$scenario)[unique(tbl_rp$scenario)!=scenRef]){
tbl_temp <- tbl_rp%>%
dplyr::filter(scenario %in% c(scenRef,scenario_i))%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)%>%
tidyr::spread(scenario,value)%>%
mutate(!!paste(scenario_i,"_diff",sep=""):=get(scenario_i)-get(scenRef))%>%
dplyr::select(-scenario_i,-scenRef)%>%
dplyr::rename(!!paste(scenario_i):=!!paste(scenario_i,"_diff",sep=""))%>%
tidyr::gather(key=scenario,value=value,
-region,-param,-units,-vintage,-x,-xLabel,-aggregate,
-class1,-classLabel1,-classPalette1,-class2,-classLabel2,
-classPalette2)
tbl_rpd<-bind_rows(tbl_rpd,tbl_temp)
}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rpd, chartType = "bar"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste("figBarDiff_",region_i,"_compareScen_",param_i,sep=""),
figWidth = 13*length(unique(tbl_rpd$scenario))/2
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rpd,chartType = "line"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste("figLineDiff_",region_i,"_compareScen_",param_i,sep=""),
figWidth = 13*length(unique(tbl_rpd$scenario))/2
)
} # close loop for param
} # close loop for region
} # Close if multiple scenarios available
return(tbl)
} # Close Function
charts<-srn.chartsProcess(dataTables)
tbl_rp<-tbl%>%dplyr::filter(region==region_i,
param==param_i)
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rp, chartType = "bar"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste("figBar_",region_i,"_compareScen_",param_i,sep=""),
figWidth = 13*length(unique(tbl_rp$scenario))/2
)
tbl_rp
rm("chartPalette")
chartPalette
rm("classPalette")
classPalette
dev.off()
dev.off()
charts<-srn.chartsProcess(dataTables)
tbl_rp<-tbl%>%dplyr::filter(region==region_i,
param==param_i)
srn.chart(tbl_rp, chartType = "bar")
head(tbl_rp)
tbl_rp%>%as.data.frame%>%head
"classPalette" %in% classPalette
srn.chart<-function(srnFormattedTable,
chartType="bar",position="stack",
x="x",y="value",class="class1",group="scenario",
classPalette="classPalette1",classLabel="classLabel1",
xLabel="xLabel",
facet_rows="region",facet_columns="scenario",ncolrow=4,scales="fixed",
useNewLabels=1,units="units",
xBreaksMaj=10, xBreaksMin=5,
yBreaksMajn=5, yBreaksMinn=10,
sizeBarLines=0.5,sizeLines=1.5){
l1 <- srnFormattedTable
l1<-l1%>%mutate(units=gsub(" ","~",units))
if("classPalette" %in% classPalette){
paletteX<-srn.colors()[[unique(l1[[classPalette]])]]}else{
paletteX<-srn.colors()[[classPalette]]
}
if(useNewLabels==1){
if(!is.null(names(paletteX))){
names(paletteX)<-toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",names(paletteX)))}
l1[[class]]<-toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",l1[[class]]))
}
p <- ggplot(l1,aes(x=x,y=value,group=get(group))) +
srn.chartsThemeLight()
# Chart Type
if(chartType=="bar"){
p <- p + geom_bar(aes(fill=get(class)),size=sizeBarLines,color="black", stat="identity",position=position) +
scale_fill_manual(values=paletteX) + guides(color=F)
if(!grepl("class",class)){
p = p + guides(fill = guide_legend(title=toTitleCase(paste(class,sep=""))))}else{
if(length(unique(l1[[class]]))<2){
p = p + theme(legend.position="none")
}else{
p = p + guides(fill = guide_legend(title=unique(l1[[classLabel]])))
}
}
}
if(chartType=="line"){
p <- p +  geom_line(aes(color=get(class),group=get(class)),size=sizeLines, stat="identity",position="identity") +
scale_color_manual(values=paletteX)
if(!grepl("class",class)){
p = p + guides(color = guide_legend(title=toTitleCase(paste(class,sep=""))))}else{
if(length(unique(l1[[class]]))<2){
p = p + theme(legend.position="none")
}else{
p = p + guides(color = guide_legend(title=unique(l1[[classLabel]])))
}
}
}
p <- p +
xlab(unique(l1[[xLabel]])) + ylab(eval(parse(text=paste(unique(l1[[units]]),collapse="~")))) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +
scale_x_continuous (breaks=(seq(min(range(l1[[x]])),max(range(l1[[x]])),by=xBreaksMaj)),
minor_breaks=(seq(min(range(l1[[x]])),max(range(l1[[x]])),by=xBreaksMin)),
expand=c(0,xBreaksMaj/2)) +
scale_y_continuous(breaks = pretty_breaks(n = yBreaksMajn), minor_breaks = waiver())
# Faceting
if(length(unique(l1[[facet_columns]])) > 1 & length(unique(l1[[facet_rows]])) > 1){
p <- p + facet_grid(get(facet_rows)~get(facet_columns),scales=scales)
}else{
if(length(unique(l1[[facet_columns]])) > 1 & length(unique(l1[[facet_rows]])) < 2){
p <- p + facet_wrap(facet_columns,ncol=ncolrow,scales = scales)
}
if(length(unique(l1[[facet_columns]])) < 2 & length(unique(l1[[facet_rows]])) > 1){
p <- p + facet_wrap(facet_rows,nrow=ncolrow,scales = scales)
}
}
return(p)
}
charts<-srn.chartsProcess(dataTables)
srn.chart<-function(srnFormattedTable,
chartType="bar",position="stack",
x="x",y="value",class="class1",group="scenario",
classPalette="classPalette1",classLabel="classLabel1",
xLabel="xLabel",
facet_rows="region",facet_columns="scenario",ncolrow=4,scales="fixed",
useNewLabels=1,units="units",
xBreaksMaj=10, xBreaksMin=5,
yBreaksMajn=5, yBreaksMinn=10,
sizeBarLines=0.5,sizeLines=1.5){
l1 <- srnFormattedTable
l1<-l1%>%mutate(units=gsub(" ","~",units))
if(classPalette %in% names(srnFormattedTable)){
paletteX<-srn.colors()[[unique(l1[[classPalette]])]]}else{
paletteX<-srn.colors()[[classPalette]]
}
if(useNewLabels==1){
if(!is.null(names(paletteX))){
names(paletteX)<-toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",names(paletteX)))}
l1[[class]]<-toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",l1[[class]]))
}
p <- ggplot(l1,aes(x=x,y=value,group=get(group))) +
srn.chartsThemeLight()
# Chart Type
if(chartType=="bar"){
p <- p + geom_bar(aes(fill=get(class)),size=sizeBarLines,color="black", stat="identity",position=position) +
scale_fill_manual(values=paletteX) + guides(color=F)
if(!grepl("class",class)){
p = p + guides(fill = guide_legend(title=toTitleCase(paste(class,sep=""))))}else{
if(length(unique(l1[[class]]))<2){
p = p + theme(legend.position="none")
}else{
p = p + guides(fill = guide_legend(title=unique(l1[[classLabel]])))
}
}
}
if(chartType=="line"){
p <- p +  geom_line(aes(color=get(class),group=get(class)),size=sizeLines, stat="identity",position="identity") +
scale_color_manual(values=paletteX)
if(!grepl("class",class)){
p = p + guides(color = guide_legend(title=toTitleCase(paste(class,sep=""))))}else{
if(length(unique(l1[[class]]))<2){
p = p + theme(legend.position="none")
}else{
p = p + guides(color = guide_legend(title=unique(l1[[classLabel]])))
}
}
}
p <- p +
xlab(unique(l1[[xLabel]])) + ylab(eval(parse(text=paste(unique(l1[[units]]),collapse="~")))) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +
scale_x_continuous (breaks=(seq(min(range(l1[[x]])),max(range(l1[[x]])),by=xBreaksMaj)),
minor_breaks=(seq(min(range(l1[[x]])),max(range(l1[[x]])),by=xBreaksMin)),
expand=c(0,xBreaksMaj/2)) +
scale_y_continuous(breaks = pretty_breaks(n = yBreaksMajn), minor_breaks = waiver())
# Faceting
if(length(unique(l1[[facet_columns]])) > 1 & length(unique(l1[[facet_rows]])) > 1){
p <- p + facet_grid(get(facet_rows)~get(facet_columns),scales=scales)
}else{
if(length(unique(l1[[facet_columns]])) > 1 & length(unique(l1[[facet_rows]])) < 2){
p <- p + facet_wrap(facet_columns,ncol=ncolrow,scales = scales)
}
if(length(unique(l1[[facet_columns]])) < 2 & length(unique(l1[[facet_rows]])) > 1){
p <- p + facet_wrap(facet_rows,nrow=ncolrow,scales = scales)
}
}
return(p)
}
dev.off()
dev.off()
dev.off()
dev.off()
charts<-srn.chartsProcess(dataTables)
srn.chartsProcess <- function(dataTables,scenRef=NULL,
dirOutputs=paste(getwd(),"/outputs",sep=""),pdfpng="png") {
#------------------
# Read in tables
#------------------
tbl<-tibble()
for(table_i in dataTables){
if(file.exists(table_i)){
# Check if any new data tables using the template have been added. The template has
# fewer number of columns since some columns are only used to track processed gcam data.
# These missing columns are added in order to have consistent rows with gcamdata tables.
tblNew<-read.csv(paste(table_i), stringsAsFactors = F)%>%as.tibble
if(length(names(tblNew))<21){
tblNew<-tblNew%>%
mutate(origScen=scenario,
origQuery="Query",
origValue=value,
origUnits=units,
origX=x)}
tbl<-bind_rows(tbl,tblNew)
} else {stop(paste(table_i," does not exist"))}
}
#------------------
# Create Folders if needed
#------------------
if (!dir.exists(dirOutputs)){
dir.create(dirOutputs)}
for (region_i in unique(tbl$region)){
if (!dir.exists(paste(dirOutputs, "/", region_i, sep = ""))){
dir.create(paste(dirOutputs, "/", region_i, sep = ""))}
if (!dir.exists(paste(dirOutputs, "/", region_i, "/regional", sep = ""))){
dir.create(paste(dirOutputs, "/", region_i, "/regional", sep = ""))}
if(length(unique(tbl$scenario))>1){
if (!dir.exists(paste(dirOutputs, "/", region_i, "/regional/compareScen",sep = ""))){
dir.create(paste(dirOutputs, "/", region_i, "/regional/compareScen",sep = ""))}}
for (scenario_i in unique(tbl$scenario)) {
if (!dir.exists(paste(dirOutputs, "/", region_i, "/regional","/", scenario_i,sep = "")))
{dir.create(paste(dirOutputs, "/", region_i, "/regional","/", scenario_i,sep = ""))}
}
}
#------------------
# Create Charts for Each Region & Each Scenario
#------------------
for(region_i in unique(tbl$region)){
for(scenario_i in unique(tbl$scenario)){
for(param_i in unique(tbl$param)){
tbl_rsp<-tbl%>%dplyr::filter(region==region_i,
scenario==scenario_i,
param==param_i)
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rsp, chartType = "bar"),
dir = paste(dirOutputs, "/", region_i, "/regional","/", scenario_i,sep = ""),
filename = paste("figBar_",region_i,"_",scenario_i,"_",param_i,sep="")
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rsp,chartType = "line"),
dir = paste(dirOutputs, "/", region_i, "/regional","/", scenario_i,sep = ""),
filename = paste("figLine_",region_i,"_",scenario_i,"_",param_i,sep="")
)
} # close loop for param
} # close loop for scenario
} # close loop for region
#------------------
# Compare Scenarios for each region
#------------------
if(length(unique(tbl$scenario))>1){
for(region_i in unique(tbl$region)){
for(param_i in unique(tbl$param)){
tbl_rp<-tbl%>%dplyr::filter(region==region_i,
param==param_i)
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rp, chartType = "bar"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste("figBar_",region_i,"_compareScen_",param_i,sep=""),
figWidth = 13*length(unique(tbl_rp$scenario))/2
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rp,chartType = "line"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste("figLine_",region_i,"_compareScen_",param_i,sep=""),
figWidth = 13*length(unique(tbl_rp$scenario))/2
)
# Aggregate across classes
tbl_rpAggsums<-tbl_rp%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-contains(class))%>%
group_by_at(vars(-value,-origValue))%>%
summarize_at(c("value"),funs(sum))
tbl_rpAggmeans<-tbl_rp%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-contains(class))%>%
group_by_at(vars(-value,-origValue))%>%
summarize_at(c("value"),funs(mean))
tbl_rpAgg<-bind_rows(tbl_rpAggsums,tbl_rpAggmeans)%>%ungroup()
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rpAgg, chartType = "bar", facet_columns="none",
class ="scenario", position ="dodge", classPalette = "pal_Basic"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste("figBarDodged_",region_i,"_compareScen_",param_i,sep="")
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rpAgg, chartType = "line", facet_columns="none",
class ="scenario", classPalette = "pal_Basic"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste("figLineOverlap_",region_i,"_compareScen_",param_i,sep="")
)
#-------------------------
# Creating Diff Plots
#------------------------
if(is.null(scenRef)){scenRef = unique(tbl_rp$scenario)[1]} # Check if Ref Scenario Chosen
# Calculate Diff Values
tbl_rpd<-tbl_rp%>%
filter(scenario==scenRef)%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
for (scenario_i in unique(tbl_rp$scenario)[unique(tbl_rp$scenario)!=scenRef]){
tbl_temp <- tbl_rp%>%
dplyr::filter(scenario %in% c(scenRef,scenario_i))%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)%>%
tidyr::spread(scenario,value)%>%
mutate(!!paste(scenario_i,"_diff",sep=""):=get(scenario_i)-get(scenRef))%>%
dplyr::select(-scenario_i,-scenRef)%>%
dplyr::rename(!!paste(scenario_i):=!!paste(scenario_i,"_diff",sep=""))%>%
tidyr::gather(key=scenario,value=value,
-region,-param,-units,-vintage,-x,-xLabel,-aggregate,
-class1,-classLabel1,-classPalette1,-class2,-classLabel2,
-classPalette2)
tbl_rpd<-bind_rows(tbl_rpd,tbl_temp)
}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rpd, chartType = "bar"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste("figBarDiff_",region_i,"_compareScen_",param_i,sep=""),
figWidth = 13*length(unique(tbl_rpd$scenario))/2
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rpd,chartType = "line"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste("figLineDiff_",region_i,"_compareScen_",param_i,sep=""),
figWidth = 13*length(unique(tbl_rpd$scenario))/2
)
}
library(srn)
