if(length(unique(tbl$scenario))>1){
if (!dir.exists(paste(dirOutputs, "/", region_i, "/regional/compareScen",sep = ""))){
dir.create(paste(dirOutputs, "/", region_i, "/regional/compareScen",sep = ""))}}
for (scenario_i in unique(tbl$scenario)) {
if (!dir.exists(paste(dirOutputs, "/", region_i, "/regional","/", scenario_i,sep = "")))
{dir.create(paste(dirOutputs, "/", region_i, "/regional","/", scenario_i,sep = ""))}
}
}
#------------------
# Create Charts for Each Region & Each Scenario
#------------------
for(region_i in unique(tbl$region)){
for(scenario_i in unique(tbl$scenario)){
for(param_i in unique(tbl$param)){
tbl_rsp<-tbl%>%dplyr::filter(region==region_i,
scenario==scenario_i,
param==param_i)
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rsp, chartType = "bar"),
dir = paste(dirOutputs, "/", region_i, "/regional","/", scenario_i,sep = ""),
filename = paste(param_i,"_figBar_",region_i,"_",scenario_i,sep="")
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rsp,chartType = "line"),
dir = paste(dirOutputs, "/", region_i, "/regional","/", scenario_i,sep = ""),
filename = paste(param_i,"_figLine_",region_i,"_",scenario_i,sep="")
)
} # close loop for param
} # close loop for scenario
} # close loop for region
#------------------
# Compare Scenarios for each region
#------------------
if(length(unique(tbl$scenario))>1){
for(region_i in unique(tbl$region)){
for(param_i in unique(tbl$param)){
tbl_rp<-tbl%>%dplyr::filter(region==region_i,
param==param_i)
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rp, chartType = "bar"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste(param_i,"_figBar_",region_i,"_compareScen",sep=""),
figWidth = 13*length(unique(tbl_rp$scenario))/2
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rp,chartType = "line"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste(param_i,"_figLine_",region_i,"_compareScen",sep=""),
figWidth = 13*length(unique(tbl_rp$scenario))/2
)
#-------------------------
# Plot with Scenarios on X for Chosen Years
#------------------------
tbl_rpy <- tbl_rp%>%filter(x %in% yearsCompare)
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rpy, chartType = "bar", facet_columns = "x", xdata ="scenario",position="dodge"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste(param_i,"_figBar_",region_i,"_compareScen_xScenSelectYears",sep=""),
figWidth = 13*length(unique(tbl_rp$scenario))/2
)
#-------------------------
# Aggregate and Plot Dodged/OverLapping Plots
#------------------------
# Aggregate across classes
tbl_rpAggsums<-tbl_rp%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-contains("class"))%>%
group_by_at(vars(-value,-origValue))%>%
summarize_at(c("value"),funs(sum))
tbl_rpAggmeans<-tbl_rp%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-contains("class"))%>%
group_by_at(vars(-value,-origValue))%>%
summarize_at(c("value"),funs(mean))
tbl_rpAgg<-bind_rows(tbl_rpAggsums,tbl_rpAggmeans)%>%ungroup()
# Bar Chart Dodged
srn.printPdfPng(
srn.chart(tbl_rpAgg, chartType = "bar", facet_columns="none",
class ="scenario", position ="dodge", classPalette = "pal_Basic"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste(param_i,"_figBarDodged_",region_i,"_compareScen_",sep="")
)
# Line Chart Overlapped
srn.printPdfPng(
srn.chart(tbl_rpAgg, chartType = "line", facet_columns="none",
class ="scenario", classPalette = "pal_Basic"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste(param_i,"_figLineOverlap_",region_i,"_compareScen",sep="")
)
#-------------------------
# Diff Plots
#------------------------
if(is.null(scenRef)){scenRef = unique(tbl_rp$scenario)[1]} # Check if Ref Scenario Chosen
# Calculate Diff Values
tbl_rpd<-tbl_rp%>%
filter(scenario==scenRef)%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
for (scenario_i in unique(tbl_rp$scenario)[unique(tbl_rp$scenario)!=scenRef]){
tbl_temp <- tbl_rp%>%
dplyr::filter(scenario %in% c(scenRef,scenario_i))%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)%>%
tidyr::spread(scenario,value)%>%
mutate(!!paste(scenario_i,"_diff",sep=""):=get(scenario_i)-get(scenRef))%>%
dplyr::select(-scenario_i,-scenRef)%>%
dplyr::rename(!!paste(scenario_i):=!!paste(scenario_i,"_diff",sep=""))%>%
tidyr::gather(key=scenario,value=value,
-region,-param,-units,-vintage,-x,-xLabel,-aggregate,
-class1,-classLabel1,-classPalette1,-class2,-classLabel2,
-classPalette2)
tbl_rpd<-bind_rows(tbl_rpd,tbl_temp)
}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rpd, chartType = "bar"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste(param_i,"figBarDiff_",region_i,"_compareScen_",sep=""),
figWidth = 13*length(unique(tbl_rpd$scenario))/2
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rpd,chartType = "line"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste(param_i,"figLineDiff_",region_i,"_compareScen_",sep=""),
figWidth = 13*length(unique(tbl_rpd$scenario))/2
)
} # close loop for param
} # close loop for region
} # Close if multiple scenarios available
return(tbl)
} # Close Function
charts<-srn.chartsProcess(dataTables)
tbl_rpy <- tbl_rp%>%filter(x %in% yearsCompare)
head(tbl_rpy)
unique(tbl_rpy$class1)
srn.chart(tbl_rpy, chartType = "bar", facet_columns = "x", xdata ="scenario",position="dodge")
tbl_rpy%>%filter(x==2015)
tbl_rpy%>%filter(x==2015,class1=="Building")
tbl_rpy%>%filter(x==2015,class1=="building")
tbl_rpy%>%filter(x==2015,class1=="building")%>%as.data.frame
l1<-tbl_rpy
l1<-l1%>%mutate(units=gsub(" ","~",units))
if(classPalette %in% names(srnFormattedTable)){
paletteX<-srn.colors()[[unique(l1[[classPalette]])]]}else{
paletteX<-srn.colors()[[classPalette]]
}
classPalette="classPalette1"
if(classPalette %in% names(srnFormattedTable)){
paletteX<-srn.colors()[[unique(l1[[classPalette]])]]}else{
paletteX<-srn.colors()[[classPalette]]
}
srnFormattedTable<-tbl_rpy
library(tools,quietly = T)
library(ggplot2,quietly = T)
library(scales,quietly = T)
l1 <- srnFormattedTable
l1<-l1%>%mutate(units=gsub(" ","~",units))
if(classPalette %in% names(srnFormattedTable)){
paletteX<-srn.colors()[[unique(l1[[classPalette]])]]}else{
paletteX<-srn.colors()[[classPalette]]
}
if(useNewLabels==1){
if(!is.null(names(paletteX))){
names(paletteX)<-toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",names(paletteX)))}
l1[[class]]<-toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",l1[[class]]))
}
useNewLabels=1
if(useNewLabels==1){
if(!is.null(names(paletteX))){
names(paletteX)<-toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",names(paletteX)))}
l1[[class]]<-toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",l1[[class]]))
}
names(paletteX)
names(paletteX)<-toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",names(paletteX)))}
names(paletteX)<-toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",names(paletteX)))
class="class1"
l1[[class]]<-toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",l1[[class]]))
p <- ggplot(l1,aes(x=get(xdata),y=get(ydata),group=get(group))) +
srn.chartsThemeLight()
p
xdata="scenario"
ydata="value"
p <- ggplot(l1,aes(x=get(xdata),y=get(ydata),group=get(group))) +
srn.chartsThemeLight()
p
group="scenario"
p <- ggplot(l1,aes(x=get(xdata),y=get(ydata),group=get(group))) +
srn.chartsThemeLight()
p
chartType="bar"
p <- p + geom_bar(aes(fill=get(class)),size=sizeBarLines,color="black", stat="identity",position=position) +
scale_fill_manual(values=paletteX) + guides(color=F)
position="dodge"
p <- p + geom_bar(aes(fill=get(class)),size=sizeBarLines,color="black", stat="identity",position=position) +
scale_fill_manual(values=paletteX) + guides(color=F)
sizeBarLines=0.5
p <- p + geom_bar(aes(fill=get(class)),size=sizeBarLines,color="black", stat="identity",position=position) +
scale_fill_manual(values=paletteX) + guides(color=F)
p
l1
l1%>%as.data.frame()
l1%>%as.data.frame()%>%filter(x=2015)
l1%>%as.data.frame()%>%filter(x==2015)
position="stack"
p <- p + geom_bar(aes(fill=get(class)),size=sizeBarLines,color="black", stat="identity",position=position) +
scale_fill_manual(values=paletteX) + guides(color=F)
p
srn.chart(tbl_rpy, chartType = "bar", facet_columns = "x", xdata ="scenario")
charts<-srn.chartsProcess(dataTables)
srn.chartsProcess <- function(dataTables,scenRef=NULL,
dirOutputs=paste(getwd(),"/outputs",sep=""),pdfpng="png",
yearsCompare=c("2015","2030","2050","2100")) {
#------------------
# Load required Libraries
# -----------------
library(tibble,quietly = T)
library(dplyr,quietly = T)
#------------------
# Read in tables
#------------------
tbl<-tibble()
for(table_i in dataTables){
if(file.exists(table_i)){
# Check if any new data tables using the template have been added. The template has
# fewer number of columns since some columns are only used to track processed gcam data.
# These missing columns are added in order to have consistent rows with gcamdata tables.
tblNew<-read.csv(paste(table_i), stringsAsFactors = F)%>%as.tibble
if(length(names(tblNew))<21){
tblNew<-tblNew%>%
mutate(origScen=scenario,
origQuery="Query",
origValue=value,
origUnits=units,
origX=x)}
tbl<-bind_rows(tbl,tblNew)
} else {stop(paste(table_i," does not exist"))}
}
#------------------
# Create Folders if needed
#------------------
if (!dir.exists(dirOutputs)){
dir.create(dirOutputs)}
for (region_i in unique(tbl$region)){
if (!dir.exists(paste(dirOutputs, "/", region_i, sep = ""))){
dir.create(paste(dirOutputs, "/", region_i, sep = ""))}
if (!dir.exists(paste(dirOutputs, "/", region_i, "/regional", sep = ""))){
dir.create(paste(dirOutputs, "/", region_i, "/regional", sep = ""))}
if(length(unique(tbl$scenario))>1){
if (!dir.exists(paste(dirOutputs, "/", region_i, "/regional/compareScen",sep = ""))){
dir.create(paste(dirOutputs, "/", region_i, "/regional/compareScen",sep = ""))}}
for (scenario_i in unique(tbl$scenario)) {
if (!dir.exists(paste(dirOutputs, "/", region_i, "/regional","/", scenario_i,sep = "")))
{dir.create(paste(dirOutputs, "/", region_i, "/regional","/", scenario_i,sep = ""))}
}
}
#------------------
# Create Charts for Each Region & Each Scenario
#------------------
for(region_i in unique(tbl$region)){
for(scenario_i in unique(tbl$scenario)){
for(param_i in unique(tbl$param)){
tbl_rsp<-tbl%>%dplyr::filter(region==region_i,
scenario==scenario_i,
param==param_i)
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rsp, chartType = "bar"),
dir = paste(dirOutputs, "/", region_i, "/regional","/", scenario_i,sep = ""),
filename = paste(param_i,"_figBar_",region_i,"_",scenario_i,sep="")
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rsp,chartType = "line"),
dir = paste(dirOutputs, "/", region_i, "/regional","/", scenario_i,sep = ""),
filename = paste(param_i,"_figLine_",region_i,"_",scenario_i,sep="")
)
} # close loop for param
} # close loop for scenario
} # close loop for region
#------------------
# Compare Scenarios for each region
#------------------
if(length(unique(tbl$scenario))>1){
for(region_i in unique(tbl$region)){
for(param_i in unique(tbl$param)){
tbl_rp<-tbl%>%dplyr::filter(region==region_i,
param==param_i)
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rp, chartType = "bar"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste(param_i,"_figBar_",region_i,"_compareScen",sep=""),
figWidth = 13*length(unique(tbl_rp$scenario))/2
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rp,chartType = "line"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste(param_i,"_figLine_",region_i,"_compareScen",sep=""),
figWidth = 13*length(unique(tbl_rp$scenario))/2
)
#-------------------------
# Plot with Scenarios on X for Chosen Years
#------------------------
tbl_rpy <- tbl_rp%>%filter(x %in% yearsCompare)
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rpy, chartType = "bar", facet_columns = "x", xdata ="scenario"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste(param_i,"_figBar_",region_i,"_compareScen_xScenSelectYears",sep=""),
figWidth = 13*length(unique(tbl_rp$scenario))/2
)
#-------------------------
# Aggregate and Plot Dodged/OverLapping Plots
#------------------------
# Aggregate across classes
tbl_rpAggsums<-tbl_rp%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-contains("class"))%>%
group_by_at(vars(-value,-origValue))%>%
summarize_at(c("value"),funs(sum))
tbl_rpAggmeans<-tbl_rp%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-contains("class"))%>%
group_by_at(vars(-value,-origValue))%>%
summarize_at(c("value"),funs(mean))
tbl_rpAgg<-bind_rows(tbl_rpAggsums,tbl_rpAggmeans)%>%ungroup()
# Bar Chart Dodged
srn.printPdfPng(
srn.chart(tbl_rpAgg, chartType = "bar", facet_columns="none",
class ="scenario", position ="dodge", classPalette = "pal_Basic"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste(param_i,"_figBarDodged_",region_i,"_compareScen_",sep="")
)
# Line Chart Overlapped
srn.printPdfPng(
srn.chart(tbl_rpAgg, chartType = "line", facet_columns="none",
class ="scenario", classPalette = "pal_Basic"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste(param_i,"_figLineOverlap_",region_i,"_compareScen",sep="")
)
#-------------------------
# Diff Plots
#------------------------
if(is.null(scenRef)){scenRef = unique(tbl_rp$scenario)[1]} # Check if Ref Scenario Chosen
# Calculate Diff Values
tbl_rpd<-tbl_rp%>%
filter(scenario==scenRef)%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
for (scenario_i in unique(tbl_rp$scenario)[unique(tbl_rp$scenario)!=scenRef]){
tbl_temp <- tbl_rp%>%
dplyr::filter(scenario %in% c(scenRef,scenario_i))%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)%>%
tidyr::spread(scenario,value)%>%
mutate(!!paste(scenario_i,"_diff",sep=""):=get(scenario_i)-get(scenRef))%>%
dplyr::select(-scenario_i,-scenRef)%>%
dplyr::rename(!!paste(scenario_i):=!!paste(scenario_i,"_diff",sep=""))%>%
tidyr::gather(key=scenario,value=value,
-region,-param,-units,-vintage,-x,-xLabel,-aggregate,
-class1,-classLabel1,-classPalette1,-class2,-classLabel2,
-classPalette2)
tbl_rpd<-bind_rows(tbl_rpd,tbl_temp)
}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rpd, chartType = "bar"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste(param_i,"figBarDiff_",region_i,"_compareScen_",sep=""),
figWidth = 13*length(unique(tbl_rpd$scenario))/2
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rpd,chartType = "line"),
dir = paste(dirOutputs, "/", region_i,"/regional/compareScen",sep = ""),
filename = paste(param_i,"figLineDiff_",region_i,"_compareScen_",sep=""),
figWidth = 13*length(unique(tbl_rpd$scenario))/2
)
} # close loop for param
} # close loop for region
} # Close if multiple scenarios available
return(tbl)
} # Close Function
charts<-srn.chartsProcess(dataTables)
library(srn)
devtools::check()
library(srn)
library(srn)
devtools::check()
library(srn)
library(srn)
search()
devtools::check()
library(srn)
library(srn)
devtools::check()
library(srn)
devtools::check()
library(srn)
devtools::check()
library(srn)
devtools::check()
?tm_layouts
library(tmap)
?tm_layouts
?tm_layout
library(srn)
devtools::check()
library(srn)
devtools::check()
?`:=`
library(ggplot2)
library(srn)
devtools::check()
requireNamespace("tools",quietly = T)
requireNamespace(tools,quietly = T)
?pdf
library(srn)
devtools::check()
library(srn)
devtools::check()
srn.colors()
#---------------------
# Create User Manual
#---------------------
# Add R to system variable path C:
# install.packages('tinytex')
# tinytex::install_tinytex()
# tinytex:::is_tinytex()
system(paste("R CMD Rd2pdf ",getwd(),sep=""))
file.exists(paste(getwd(),"/srn.pdf",sep=""))
unlink(paste(getwd(),"/srn.pdf",sep=""))
system(paste("R CMD Rd2pdf ",getwd(),sep=""))
#--------------------
# Create Vignettes
#---------------------
# Create a subdirectory in the package folder called "vignettes"
# Place NAME.vignette.Rmd file in there
# http://kbroman.org/pkg_primer/pages/vignettes.html
devtools::build_vignettes()
#----------------------------
# Install The SRN Package
#----------------------------
#install.packages("devtools");
#library(devtools)
#install_github(repo="zarrarkhan/srn",'dev_srn') # To install directly from branch
library(srn)
#install_github(repo="JGCRI/rgcam")
library(rgcam)
#----------------------------
#----------------------------
# Install The SRN Package
#----------------------------
#install.packages("devtools");
#library(devtools)
#install_github(repo="zarrarkhan/srn",'dev_srn') # To install directly from branch
install_github(repo="zarrarkhan/srn") # To install from master
#----------------------------
# Install The SRN Package
#----------------------------
#install.packages("devtools");
#library(devtools)
#install_github(repo="zarrarkhan/srn",'dev_srn') # To install directly from branch
library(devtools)
install_github(repo="zarrarkhan/srn") # To install from master
library(srn)
#install_github(repo="JGCRI/rgcam")
library(rgcam)
#----------------------------
# Tests
#----------------------------
a<-srn.colors()
testcolor<-a$elec_tech_colors
pie(rep(1,length(testcolor)),label=names(testcolor),col=a$testcolor)
gcamdatabasePath <-paste(getwd(),"/dataFiles/gcam",sep="")
gcamdatabaseName <-"example_database_basexdb"
regions <- c("Colombia","Argentina")
gcamData<-srn.readgcam(reReadData=F, # Default Value is T
dataProj="Example_dataProj.proj", # Default Value is "dataProj.proj"
scenOrigNames=c("ExampleScen1","ExampleScen2"),
scenNewNames=c("Eg1","Eg2"),
gcamdatabasePath=gcamdatabasePath,
gcamdatabaseName=gcamdatabaseName,
queryxml="srnQueries.xml",  # Default Value is "srnQueries.xml"
dirOutputs= paste(getwd(),"/outputs",sep=""), # Default Value is paste(getwd(),"/outputs",sep="")
regions=regions # Default Value is NULL
)
dataTables<-c(paste(getwd(),"/outputs/Colombia/regional/dataTable_Colombia_1975to2100.csv",sep=""),
paste(getwd(),"/outputs/Colombia/regional/dataTableLocal_Colombia_1975to2100.csv",sep=""))
charts<-srn.chartsProcess(dataTables)
install_github(repo="zarrarkhan/srn") # To install from master
?install_github
# Don not update your packages. Install the required ones.
library(srn)
#install_github(repo="JGCRI/rgcam")
library(rgcam)
charts<-srn.chartsProcess(dataTables)
?srn.chartsProcess
library(srn)
library(srn)
install.packages("processx")
library(srn)
dataTables<-c(paste(getwd(),"/outputs/Colombia/regional/dataTable_Colombia_1975to2100.csv",sep=""),
paste(getwd(),"/outputs/Colombia/regional/dataTableLocal_Colombia_1975to2100.csv",sep=""))
charts<-srn.chartsProcess(dataTables)
dataTables<-c(paste(getwd(),"/outputs/Colombia/regional/dataTable_Colombia_1975to2100.csv",sep=""),
paste(getwd(),"/outputs/Colombia/regional/dataTableLocal_Colombia_1975to2100.csv",sep=""))
charts<-srn.chartsProcess(dataTables)
devtools::check()
