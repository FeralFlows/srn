library(srn)
#----------------------------
# Tests
#----------------------------
a<-srn.colors()
testcolor<-a$elec_tech_colors
pie(rep(1,length(testcolor)),label=names(testcolor),col=a$testcolor)
#----------------------------
# Read GCAM Data
#---------------------------
gcamdatabasePath <-paste(getwd(),"/dataFiles/gcam",sep="")
gcamdatabaseName <-"example_database_basexdb"
regionsSelect <- c("Colombia","Argentina")
# Use function localDBConn from package rgcam to get a list of scenarios if needed.
#localDBConn(gcamdatabasePath,gcamdatabaseName)
dataGCAM<-srn.readgcam(reReadData=F, # Default Value is T
dataProj="Example_dataProj.proj", # Default Value is "dataProj.proj"
scenOrigNames=c("ExampleScen1","ExampleScen2"),
scenNewNames=c("Eg1","Eg2"),
gcamdatabasePath=gcamdatabasePath,
gcamdatabaseName=gcamdatabaseName,
queryxml="srnQueries.xml",  # Default Value is "srnQueries.xml"
dirOutputs= paste(getwd(),"/outputs",sep=""), # Default Value is paste(getwd(),"/outputs",sep="")
regionsSelect=regionsSelect, # Default Value is NULL
queriesSelect="All" # Default value is "All"
)
#----------------------------
# Produce Data Charts
#---------------------------
# Read in Tables
dataTables<-c(paste(getwd(),"/outputs/Tables_Local/local_Regional_Colombia.csv",sep=""),
paste(getwd(),"/outputs/Tables_Local/local_Regional_Argentina.csv",sep=""))
# Read in the data from the function srn.readgcam
rTable <- dataGCAM$data;
unique(rTable$param)
# Choose Parameters or set to "All" for all params
paramsSelect=c("gdp","finalNrgbySec","xxx")
regionsSelect=c("Argentina","Colombia","XSASD")
charts<-srn.chartsProcess(rTable=rTable, # Default is NULL
dataTables=dataTables, # Default is NULL
paramsSelect=paramsSelect, # Default is "All"
regionsSelect=regionsSelect, # Default is "All"
yearsCompare=c("2015","2030","2050","2100"), # Default is c("2015","2030","2050","2100")
scenRef="Eg1", # Default is NULL
dirOutputs=paste(getwd(),"/outputs",sep=""), # Default is paste(getwd(),"/outputs",sep="")
pdfpng="png" # Default is "png"
)
dataTables
for(i in dataTables){
if(file.exists(i)){
# Check if any new data tables using the template have been added. The template has
# fewer number of columns since some columns are only used to track processed gcam data.
# These missing columns are added in order to have consistent rows with gcamdata tables.
tblNew<-read.csv(paste(i), stringsAsFactors = F)%>%as.tibble
if(ncol(tblNew)==16){
tblNew<-tblNew%>%
mutate(origScen=scenario,
origQuery="Query",
origValue=value,
origUnits=units,
origX=x)
if(length(unique(tblNew$vintage))<2){tblNew<-tblNew%>%mutate(vintage = paste("Vint_", x, sep = ""))}
} else {stop(paste("Table ",i," format is not correct. The table should have the following column names:
scenario, region, sources, param, class1, class2, units, x,
value, vintage, xLabel, aggregate, classLabel1, classPalette1, classLabel2, classPalette2",sep=""))}
tbl<-bind_rows(tbl,tblNew)
} else {stop(paste(i," does not exist"))}
}
file.exists(i)
srn.readgcam <- function(gcamdatabasePath, gcamdatabaseName, queryxml = "srnQueries.xml",
scenOrigNames, scenNewNames = NULL,
reReadData = T, dataProj = "dataProj.proj", dirOutputs = paste(getwd(), "/outputs", sep = ""),
regionsSelect = NULL, queriesSelect="All") {
#------------------
# Load required Libraries
# -----------------
requireNamespace("tibble",quietly = T)
requireNamespace("dplyr",quietly = T)
#----------------
# Initialize variables by setting to NULL
#----------------
NULL -> vintage -> year -> xLabel -> x -> value -> sector -> scenario -> region -> param -> origX -> origValue ->
origUnits -> origScen -> origQuery -> classPalette2 -> classPalette1 -> classLabel2 -> classLabel1 -> class2 ->
class1 -> connx -> aggregate -> Units -> sources
# Create necessary directories if they dont exist.
if (!dir.exists(dirOutputs)){
dir.create(dirOutputs)}  # Output Directory
if (!dir.exists(paste(dirOutputs, "/Tables_gcam", sep = ""))){
dir.create(paste(dirOutputs, "/Tables_gcam", sep = ""))}  # GCAM output directory
if (!dir.exists(paste(dirOutputs, "/Tables_Templates", sep = ""))){
dir.create(paste(dirOutputs, "/Tables_Templates", sep = ""))}  # GCAM output directory
if (!dir.exists(paste(dirOutputs, "/Tables_Local", sep = ""))){
dir.create(paste(dirOutputs, "/Tables_Local", sep = ""))}  # GCAM output directory
# Check for new scenario names
if (is.null(scenNewNames)) {
scenNewNames <- scenOrigNames}
# Read gcam database or existing dataProj.proj
if (!reReadData) {
if (file.exists(paste(gcamdatabasePath, "/", dataProj, sep = ""))) {
dataProjLoaded <- loadProject(paste(gcamdatabasePath, "/", dataProj, sep = ""))
} else {
stop(paste("No ", dataProj, " file exists. Please set reReadData=T to create dataProj.proj"))
}
} else {
if (file.exists(dataProj)){
file.remove(dataProj)}  # Delete old project file
for (scenario_i in scenOrigNames) {
dataProj.proj <- addScenario(conn = localDBConn(gcamdatabasePath, gcamdatabaseName), proj = dataProj,
scenario = scenario_i, queryFile = paste(gcamdatabasePath, "/", queryxml, sep = ""))  # Check your queries file
}
file.copy(from = paste(getwd(), "/", dataProj, sep = ""), to = gcamdatabasePath, overwrite = T,
copy.mode = TRUE)
file.remove(dataProj)
dataProjLoaded <- loadProject(paste(gcamdatabasePath, "/", dataProj, sep = ""))
}
# Save list of scenarios and queries
scenarios <- listScenarios(dataProjLoaded)  # List of Scenarios in GCAM database
queries <- listQueries(dataProjLoaded)  # List of Queries in queryxml
# Read in paramaters from query file to create formatted table
datax <- tibble()
if(queriesSelect=="All"){queriesx <- queries} else{
if(!all(queriesSelect %in% queries)){stop("No parameters are available in queryxml.
Please check your queriesSelect entries or your queryxml")} else {
if(length(queriesSelect[!(queriesSelect %in% queries)])>0){
print(paste("Parameters not available in queryxml: ", paste(queriesSelect[!(queriesSelect %in% queries)],collapse=", "), sep=""))
print(paste("Running remaining queriesSelect: ",  paste(queriesSelect[(queriesSelect %in% queries)],collapse=", "), sep=""))}
queriesx <- queriesSelect}
}
# Total final energy by aggregate end-use sector
paramx <- "Total final energy by aggregate end-use sector"
if (paramx %in% queriesx) {
tbl <- getQuery(dataProjLoaded, paramx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
left_join(data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
mutate(param = "finalNrgbySec",
sources = "Sources",
origScen = scenario,
origQuery = paramx,
origValue = value,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value = value * srn.assumptions()$convEJ2TWh,
units = "Final Energy (TWh)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = sector,
classLabel1 = "Sector",
classPalette1 = "pal_finalNrg_sec",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2")%>%
dplyr::select(origScen,origQuery, origValue, origUnits, origX, region, param, scenario,
value, units, vintage, x, xLabel, aggregate, class1, classLabel1, classPalette1,
class2, classLabel2, classPalette2)
datax <- bind_rows(datax, tbl)
} else {
print(paste("Paramater '", paramx, "' not found in database", sep = ""))
}
# GDP MER by region
paramx <- "GDP MER by region"
if (paramx %in% queriesx) {
tbl <- getQuery(dataProjLoaded, paramx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
left_join(data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
mutate(param = "gdp",
sources = "Sources",
origScen = scenario,
origQuery = paramx,
origValue = value,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value = value/1000,
units = "GDP (Billion 1990 USD)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = "class1",
classLabel1 = "GDP",
classPalette1 = "pal_16",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2") %>%
dplyr::select(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units, value,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origValue, origUnits, origX)
datax <- bind_rows(datax, tbl)
} else {
print(paste("Paramater '", paramx, "' not found in database", sep = ""))
}
#---------------------
# Create Data Template
#---------------------
dataTemplate <- datax %>%
mutate(scenario = "Local Data", value = 0, sources="Sources", x="e.g. 2010", vintage="vintage if available") %>%
dplyr::select(scenario, region, sources, param, class1, class2, units, x, value, vintage, xLabel, aggregate,
classLabel1, classPalette1, classLabel2, classPalette2) %>%
unique()
#---------------------
# Save Data in CSV
#---------------------
if (is.null(regionsSelect)) {
utils::write.csv(datax, file = paste(dirOutputs, "/Tables_gcam/gcamDataTable_AllRegions_", min(range(datax$x)),
"to", max(range(datax$x)), ".csv", sep = ""), row.names = F)
utils::write.csv(dataTemplate, file = paste(dirOutputs, "/Tables_Template/template_Regional_AllRegions.csv", sep = ""),
row.names = F)
} else {
if(!all(regionsSelect %in% unique(datax$region))){
print(paste("Regions not available in data: ", paste(regionsSelect[!(regionsSelect %in% unique(datax$region))],collapse=", "), sep=""))
print(paste("Running remaining regions: ",  paste(regionsSelect[(regionsSelect %in% unique(datax$region))],collapse=", "), sep=""))
}
for (region_i in regionsSelect[(regionsSelect %in% unique(datax$region))]) {
utils::write.csv(datax %>% dplyr::filter(region == region_i),
file = paste(dirOutputs, "/Tables_gcam/gcamDataTable_",region_i,"_", min(range(datax$x)),
"to", max(range(datax$x)), ".csv", sep = ""),row.names = F)
utils::write.csv(dataTemplate %>% dplyr::filter(region == region_i),
file = paste(dirOutputs, "/Tables_Templates/template_Regional_",region_i,".csv", sep = ""),row.names = F)
utils::write.csv(dataTemplate %>% dplyr::filter(region == region_i),
file = paste(dirOutputs, "/Tables_Local/local_Regional_",region_i,".csv", sep = ""),row.names = F)
}
}
return(list(data = datax, dataTemplate = dataTemplate, scenarios = scenarios, queries = queries))
}
charts<-srn.chartsProcess(rTable=rTable, # Default is NULL
dataTables=dataTables, # Default is NULL
paramsSelect=paramsSelect, # Default is "All"
regionsSelect=regionsSelect, # Default is "All"
yearsCompare=c("2015","2030","2050","2100"), # Default is c("2015","2030","2050","2100")
scenRef="Eg1", # Default is NULL
dirOutputs=paste(getwd(),"/outputs",sep=""), # Default is paste(getwd(),"/outputs",sep="")
pdfpng="png" # Default is "png"
)
for(i in dataTables){
if(file.exists(i)){
# Check if any new data tables using the template have been added. The template has
# fewer number of columns since some columns are only used to track processed gcam data.
# These missing columns are added in order to have consistent rows with gcamdata tables.
tblNew<-read.csv(paste(i), stringsAsFactors = F)%>%as.tibble
if(ncol(tblNew)==16){
tblNew<-tblNew%>%
mutate(origScen=scenario,
origQuery="Query",
origValue=value,
origUnits=units,
origX=x)
if(length(unique(tblNew$vintage))<2){tblNew<-tblNew%>%mutate(vintage = paste("Vint_", x, sep = ""))}
} else {stop(paste("Table ",i," format is not correct. The table should have the following column names:
scenario, region, sources, param, class1, class2, units, x,
value, vintage, xLabel, aggregate, classLabel1, classPalette1, classLabel2, classPalette2",sep=""))}
tbl<-bind_rows(tbl,tblNew)
} else {stop(paste(i," does not exist"))}
}
i
# Check if any new data tables using the template have been added. The template has
# fewer number of columns since some columns are only used to track processed gcam data.
# These missing columns are added in order to have consistent rows with gcamdata tables.
tblNew<-read.csv(paste(i), stringsAsFactors = F)%>%as.tibble
ncol(tblNew)==16
tblNew
tblNew<-tblNew%>%
mutate(origScen=scenario,
origQuery="Query",
origValue=value,
origUnits=units,
origX=x)
tblNew<-tblNew%>%
mutate(origScen=scenario,
origQuery="Query",
origValue=value,
origUnits=units,
x=as.numeric(x),
origX=x)
tblNew
if(length(unique(tblNew$vintage))<2){tblNew<-tblNew%>%mutate(vintage = paste("Vint_", x, sep = ""))}
library(srn)
dataGCAM<-srn.readgcam(reReadData=F, # Default Value is T
dataProj="Example_dataProj.proj", # Default Value is "dataProj.proj"
scenOrigNames=c("ExampleScen1","ExampleScen2"),
scenNewNames=c("Eg1","Eg2"),
gcamdatabasePath=gcamdatabasePath,
gcamdatabaseName=gcamdatabaseName,
queryxml="srnQueries.xml",  # Default Value is "srnQueries.xml"
dirOutputs= paste(getwd(),"/outputs",sep=""), # Default Value is paste(getwd(),"/outputs",sep="")
regionsSelect=regionsSelect, # Default Value is NULL
queriesSelect="All" # Default value is "All"
)
# Read in Tables
dataTables<-c(paste(getwd(),"/outputs/Tables_Local/local_Regional_Colombia.csv",sep=""),
paste(getwd(),"/outputs/Tables_Local/local_Regional_Argentina.csv",sep=""))
# Read in the data from the function srn.readgcam
rTable <- dataGCAM$data;
unique(rTable$param)
# Choose Parameters or set to "All" for all params
paramsSelect=c("gdp","finalNrgbySec","xxx")
regionsSelect=c("Argentina","Colombia","XSASD")
charts<-srn.chartsProcess(rTable=rTable, # Default is NULL
dataTables=dataTables, # Default is NULL
paramsSelect=paramsSelect, # Default is "All"
regionsSelect=regionsSelect, # Default is "All"
yearsCompare=c("2015","2030","2050","2100"), # Default is c("2015","2030","2050","2100")
scenRef="Eg1", # Default is NULL
dirOutputs=paste(getwd(),"/outputs",sep=""), # Default is paste(getwd(),"/outputs",sep="")
pdfpng="png" # Default is "png"
)
srn.readgcam <- function(gcamdatabasePath, gcamdatabaseName, queryxml = "srnQueries.xml",
scenOrigNames, scenNewNames = NULL,
reReadData = T, dataProj = "dataProj.proj", dirOutputs = paste(getwd(), "/outputs", sep = ""),
regionsSelect = NULL, queriesSelect="All") {
#------------------
# Load required Libraries
# -----------------
requireNamespace("tibble",quietly = T)
requireNamespace("dplyr",quietly = T)
#----------------
# Initialize variables by setting to NULL
#----------------
NULL -> vintage -> year -> xLabel -> x -> value -> sector -> scenario -> region -> param -> origX -> origValue ->
origUnits -> origScen -> origQuery -> classPalette2 -> classPalette1 -> classLabel2 -> classLabel1 -> class2 ->
class1 -> connx -> aggregate -> Units -> sources
# Create necessary directories if they dont exist.
if (!dir.exists(dirOutputs)){
dir.create(dirOutputs)}  # Output Directory
if (!dir.exists(paste(dirOutputs, "/Tables_gcam", sep = ""))){
dir.create(paste(dirOutputs, "/Tables_gcam", sep = ""))}  # GCAM output directory
if (!dir.exists(paste(dirOutputs, "/Tables_Templates", sep = ""))){
dir.create(paste(dirOutputs, "/Tables_Templates", sep = ""))}  # GCAM output directory
if (!dir.exists(paste(dirOutputs, "/Tables_Local", sep = ""))){
dir.create(paste(dirOutputs, "/Tables_Local", sep = ""))}  # GCAM output directory
# Check for new scenario names
if (is.null(scenNewNames)) {
scenNewNames <- scenOrigNames}
# Read gcam database or existing dataProj.proj
if (!reReadData) {
if (file.exists(paste(gcamdatabasePath, "/", dataProj, sep = ""))) {
dataProjLoaded <- loadProject(paste(gcamdatabasePath, "/", dataProj, sep = ""))
} else {
stop(paste("No ", dataProj, " file exists. Please set reReadData=T to create dataProj.proj"))
}
} else {
if (file.exists(dataProj)){
file.remove(dataProj)}  # Delete old project file
for (scenario_i in scenOrigNames) {
dataProj.proj <- addScenario(conn = localDBConn(gcamdatabasePath, gcamdatabaseName), proj = dataProj,
scenario = scenario_i, queryFile = paste(gcamdatabasePath, "/", queryxml, sep = ""))  # Check your queries file
}
file.copy(from = paste(getwd(), "/", dataProj, sep = ""), to = gcamdatabasePath, overwrite = T,
copy.mode = TRUE)
file.remove(dataProj)
dataProjLoaded <- loadProject(paste(gcamdatabasePath, "/", dataProj, sep = ""))
}
# Save list of scenarios and queries
scenarios <- listScenarios(dataProjLoaded)  # List of Scenarios in GCAM database
queries <- listQueries(dataProjLoaded)  # List of Queries in queryxml
# Read in paramaters from query file to create formatted table
datax <- tibble()
if(queriesSelect=="All"){queriesx <- queries} else{
if(!all(queriesSelect %in% queries)){stop("No parameters are available in queryxml.
Please check your queriesSelect entries or your queryxml")} else {
if(length(queriesSelect[!(queriesSelect %in% queries)])>0){
print(paste("Parameters not available in queryxml: ", paste(queriesSelect[!(queriesSelect %in% queries)],collapse=", "), sep=""))
print(paste("Running remaining queriesSelect: ",  paste(queriesSelect[(queriesSelect %in% queries)],collapse=", "), sep=""))}
queriesx <- queriesSelect}
}
# Total final energy by aggregate end-use sector
paramx <- "Total final energy by aggregate end-use sector"
if (paramx %in% queriesx) {
tbl <- getQuery(dataProjLoaded, paramx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
left_join(data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
mutate(param = "finalNrgbySec",
sources = "Sources",
origScen = scenario,
origQuery = paramx,
origValue = value,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value = value * srn.assumptions()$convEJ2TWh,
units = "Final Energy (TWh)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = sector,
classLabel1 = "Sector",
classPalette1 = "pal_finalNrg_sec",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2")%>%
dplyr::select(origScen,origQuery, origValue, origUnits, origX, region, param, scenario,
value, units, vintage, x, xLabel, aggregate, class1, classLabel1, classPalette1,
class2, classLabel2, classPalette2)
datax <- bind_rows(datax, tbl)
} else {
print(paste("Paramater '", paramx, "' not found in database", sep = ""))
}
# GDP MER by region
paramx <- "GDP MER by region"
if (paramx %in% queriesx) {
tbl <- getQuery(dataProjLoaded, paramx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
left_join(data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
mutate(param = "gdp",
sources = "Sources",
origScen = scenario,
origQuery = paramx,
origValue = value,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value = value/1000,
units = "GDP (Billion 1990 USD)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = "class1",
classLabel1 = "GDP",
classPalette1 = "pal_16",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2") %>%
dplyr::select(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units, value,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origValue, origUnits, origX)
datax <- bind_rows(datax, tbl)
} else {
print(paste("Paramater '", paramx, "' not found in database", sep = ""))
}
#---------------------
# Create Data Template
#---------------------
dataTemplate <- datax %>%
mutate(scenario = "Local Data", value = 0, sources="Sources", x=2010, vintage="vintage if available") %>%
dplyr::select(scenario, region, sources, param, class1, class2, units, x, value, vintage, xLabel, aggregate,
classLabel1, classPalette1, classLabel2, classPalette2) %>%
unique()
#---------------------
# Save Data in CSV
#---------------------
if (is.null(regionsSelect)) {
utils::write.csv(datax, file = paste(dirOutputs, "/Tables_gcam/gcamDataTable_AllRegions_", min(range(datax$x)),
"to", max(range(datax$x)), ".csv", sep = ""), row.names = F)
utils::write.csv(dataTemplate, file = paste(dirOutputs, "/Tables_Template/template_Regional_AllRegions.csv", sep = ""),
row.names = F)
} else {
if(!all(regionsSelect %in% unique(datax$region))){
print(paste("Regions not available in data: ", paste(regionsSelect[!(regionsSelect %in% unique(datax$region))],collapse=", "), sep=""))
print(paste("Running remaining regions: ",  paste(regionsSelect[(regionsSelect %in% unique(datax$region))],collapse=", "), sep=""))
}
for (region_i in regionsSelect[(regionsSelect %in% unique(datax$region))]) {
utils::write.csv(datax %>% dplyr::filter(region == region_i),
file = paste(dirOutputs, "/Tables_gcam/gcamDataTable_",region_i,"_", min(range(datax$x)),
"to", max(range(datax$x)), ".csv", sep = ""),row.names = F)
utils::write.csv(dataTemplate %>% dplyr::filter(region == region_i),
file = paste(dirOutputs, "/Tables_Templates/template_Regional_",region_i,".csv", sep = ""),row.names = F)
utils::write.csv(dataTemplate %>% dplyr::filter(region == region_i),
file = paste(dirOutputs, "/Tables_Local/local_Regional_",region_i,".csv", sep = ""),row.names = F)
}
}
return(list(data = datax, dataTemplate = dataTemplate, scenarios = scenarios, queries = queries))
}
dataGCAM<-srn.readgcam(reReadData=F, # Default Value is T
dataProj="Example_dataProj.proj", # Default Value is "dataProj.proj"
scenOrigNames=c("ExampleScen1","ExampleScen2"),
scenNewNames=c("Eg1","Eg2"),
gcamdatabasePath=gcamdatabasePath,
gcamdatabaseName=gcamdatabaseName,
queryxml="srnQueries.xml",  # Default Value is "srnQueries.xml"
dirOutputs= paste(getwd(),"/outputs",sep=""), # Default Value is paste(getwd(),"/outputs",sep="")
regionsSelect=regionsSelect, # Default Value is NULL
queriesSelect="All" # Default value is "All"
)
library(srn)
charts<-srn.chartsProcess(rTable=rTable, # Default is NULL
dataTables=dataTables, # Default is NULL
paramsSelect=paramsSelect, # Default is "All"
regionsSelect=regionsSelect, # Default is "All"
yearsCompare=c("2015","2030","2050","2100"), # Default is c("2015","2030","2050","2100")
scenRef="Eg1", # Default is NULL
dirOutputs=paste(getwd(),"/outputs",sep=""), # Default is paste(getwd(),"/outputs",sep="")
pdfpng="png" # Default is "png"
)
library(srn)
devtools::check()
library(srn)
devtools::check()
#---------------------
# Create User Manual
#---------------------
# Add R to system variable path C:
# install.packages('tinytex')
# tinytex::install_tinytex()
# tinytex:::is_tinytex()
if(file.exists(paste(getwd(),"/srn.pdf",sep=""))){unlink(paste(getwd(),"/srn.pdf",sep=""))}
system(paste("R CMD Rd2pdf ",getwd(),sep=""))
